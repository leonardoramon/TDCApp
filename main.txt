Ajustes - GameManager

// função final para conversão de toque
private Vector3 GetLeapTapPosition(Camera camera)
    {
        Vector3 clickPosition = Vector3.zero;
		
        clickPosition = leapTapPosition;
        clickPosition = camera.ScreenToWorldPoint(clickPosition);
        clickPosition.z = 0;
		
        return clickPosition;
    }
	
//Lógica do LeapMotion processada frame a frame
void Update()
    {
        Leap.Frame frame = controller.Frame();
        Leap.Finger finger = frame.Fingers.Frontmost;
        Leap.Vector stabilizedPosition = finger.StabilizedTipPosition;

        Leap.InteractionBox ibox = controller.Frame().InteractionBox;
        Leap.Vector normalizedPosition = ibox.NormalizePoint(stabilizedPosition);
        float x = normalizedPosition.x * Screen.width; //fix para normalizar posição x
        float y = normalizedPosition.y * Screen.height; //fix para normalizar posição y
        leapTapPosition = new Vector3(x, y);

		// Cursor acompanha  posição do dedo 0 do Leap
        hand.transform.position = leapTapPosition;

		//Checagem de limites da tela (prevenir overlapping)
        if(leapTapPosition.x > 0 && leapTapPosition.x < Screen.width && leapTapPosition.y > 0 && leapTapPosition.y < Screen.height)
        {
            if (!shape.completed)
                brightEffect.GetComponent<ParticleEmitter>().emit = true;

            hit2d = Physics2D.Raycast(GetCurrentPlatformClickPosition(Camera.main), Vector2.zero);
            if (hit2d.collider != null)
            {
                if (hit2d.transform.tag == "Start")
                {
                    OnStartHitCollider(hit2d);
                    shape.CancelInvoke();
                    shape.DisableTracingHand();
                    EnableHand();
                }
                else if (hit2d.transform.tag == "Collider")
                {
                    shape.DisableTracingHand();
                    EnableHand();
                }
            }
        }
        else
        {
            Debug.Log("Gesto Inválido.");
            brightEffect.GetComponent<ParticleEmitter>().emit = false;
            DisableHand();
            shape.Invoke("EnableTracingHand", 1);
            ResetPath();

        }

        foreach (Leap.Gesture gesture in frame.Gestures())
        {
            switch (gesture.Type)
            {
                case (Leap.Gesture.GestureType.TYPECIRCLE):
                    {
                        Debug.Log("Gesto de Círculo.");
                        break;
                    }
                case (Leap.Gesture.GestureType.TYPEINVALID):
                    {
                        Debug.Log("Gesto Inválido.");
                        brightEffect.GetComponent<ParticleEmitter>().emit = false;
                        DisableHand();
                        shape.Invoke("EnableTracingHand", 1);
                        ResetPath();
                        break;
                    }
                case (Leap.Gesture.GestureType.TYPEKEYTAP):
                    {
                        Debug.Log("Key Tap gesture recognized.");
                        break;
                    }
                case (Leap.Gesture.GestureType.TYPESCREENTAP):
                    {
                        Debug.Log("Gesto de toque na tela.");

                        Leap.ScreenTapGesture tap = new Leap.ScreenTapGesture(gesture);
                        //tapPosition = Leap.UnityVectorExtension.ToUnityScaled(tap.Position);
                       // leapTapPosition = Leap.UnityVectorExtension.ToUnity(tap.Position);//ToUnity(tap.Position);
                     
                        //Debug.Log(leapTapPosition.x);

                        if (!shape.completed)
                            brightEffect.GetComponent<ParticleEmitter>().emit = true;

                        hit2d = Physics2D.Raycast(GetCurrentPlatformClickPosition(Camera.main), Vector2.zero);
                        if (hit2d.collider != null)
                        {
                            if (hit2d.transform.tag == "Start")
                            {
                                OnStartHitCollider(hit2d);
                                shape.CancelInvoke();
                                shape.DisableTracingHand();
                                EnableHand();
                            }
                            else if (hit2d.transform.tag == "Collider")
                            {
                                shape.DisableTracingHand();
                                EnableHand();
                            }
                        }

                        break;
                    }
                case (Leap.Gesture.GestureType.TYPESWIPE):
                    {
                        Debug.Log("Gesto de Swipe.");
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }

		// Desenha mão e efeito pós checagem do Leap 
        DrawHand(GetCurrentPlatformClickPosition(Camera.main));
        DrawBrightEffect(GetCurrentPlatformClickPosition(Camera.main));

        if (shape == null)
        {
            return;
        }

        if (shape.completed)
        {
            return;
        }
}

//Adaptação de preenchimento para cursor
 fillAmount = Mathf.Abs(angle / 360.0f);
//fix para funcionalidade com pointer + sensor
//fillAmount = 1;
pathFillImage.fillAmount = fillAmount;
CheckPathComplete();

